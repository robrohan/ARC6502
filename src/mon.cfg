## used a straight forward memory map with 16k bytes of RAM
## (address range $0000-$3FFF), 32k bytes ROM ($8000-$FFFF),
## and I/O addressable in the remaining range ($4000-$7FFF).
## Thus, when the 6502 addresses $0500 it is accessing RAM.
## Similarly, at address $F000 it is accessing ROM and at
## address $4100, I/O.

## But for your information, the 6502 computer I designed has
## 16K of RAM and 32K of ROM. You can see that reflected in
## the config file.

## https://www.wilsonminesco.com/6502primer/MemMapReqs.html


## STACK $0100-$01FF

MEMORY {
    ZP:         start = $0000, size = $0100, fill = no, type = rw;
    ## STACK ($0100-$01FF)
    RAM:        start = $0000, size = $2000, fill = no, type = rw;
    ## IO    ($4000-$7FFF)
    IO:         start = $2000, size = $6000, fill = no, type = rw;
    ROM:        start = $8000, size = $8000, fill = yes, type = ro, file = %O;
    VEC:        start = $FFFA, size = $0006, fill = yes, type = ro, file = %O;
}

SEGMENTS {
    ZEROPAGE:   load = ZP, type = zp;
    CODE:       load = ROM, type = ro;
    DATA:       load = RAM, type = rw;
    # RODATA:     load = RAM, type = ro;
    BSS:        load = RAM, type = bss, define = yes;
    # VECTORS:    load = VEC, type = ro;
    VECTORS:    load = ROM, type = ro, start = $FFFA;
}